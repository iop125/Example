<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="student" class="com.jd.test.domain.Student">
        <property name="age" value="14"/>
        <property name="sname" value="wo"/>
        <property name="teacher" ref="teacher"/>
    </bean>

    <!--
    scope="singleton" Spring在启动时 被创建保存在spring框架singletonList中
    调用的时候只会返回同一个对象
    scope="prototype" 不会再spring启动的时创建，在调用的时候返回一个新的实例
        -->
    <bean id="teacher" class="com.jd.test.domain.Teacher" scope="singleton"/>

    <!--
    告诉spring容器 当前对象是由 动态工厂创建的
    -->
    <!--<bean id="teacher1" factory-bean="teacherFactory" factory-method="createTeacher"/>-->
    <!--<bean id="teacher2" factory-bean="teacher2Factory" factory-method="createTeacher"/>-->
    <!--<bean id="teacher3" class="com.jd.test.example.DyNamicFactory.Teacher3Fatory" factory-method="createTeacher"/>-->

    <!--<bean id="teacherFactory" class="com.jd.test.example.DyNamicFactory.TeacherFatory" scope="singleton"/>-->
    <!--<bean id="teacher2Factory" class="com.jd.test.example.DyNamicFactory.Teacher2Fatory" scope="singleton"/>-->

    <!--注册bean ：被监控实现类-->
    <bean id="isomeService" class="com.jd.test.example.BeanPostProcessor.ISomeService"/>
    <!--注册代理类-->
    <bean class="com.jd.test.example.BeanPostProcessor.MyBeanPostProcessor"/>

    <!--    DI   -->
    <bean id="lession" class="com.jd.test.example.beanDI.Lession">
        <property name="lessionName" value="三年"/>
        <property name="timeArray" value="星期一,星期二"/>
        <property name="school" value="北大,清华,工大"/>
    </bean>
    <!--   AOP-通知  -->
    <!-- 注册被监控实现类-->
    <bean id="persion" class="com.jd.test.example.Aop_Advice_tongzhi.IPersonService">

    </bean>
    <!-- 注册通知的实现类-->
    <!-- 前置通知实现类-->
    <bean id="before" class="com.jd.test.example.Aop_Advice_tongzhi.BeforeAdvice"/>
    <!-- 后置通知实现类-->
    <bean id="afterAdvice" class="com.jd.test.example.Aop_Advice_tongzhi.MyAfterAdvice"/>
    <!-- 返回通知实现类-->
    <bean id="afterReturning" class="com.jd.test.example.Aop_Advice_tongzhi.MyAfterReturningAdvice"/>
    <!-- 环绕通知实现类-->
    <bean id="methodInterceptor" class="com.jd.test.example.Aop_Advice_tongzhi.MyMethodInterceptor"/>
    <!-- 异常通知实现类-->
    <bean id="afterThrowingAdvice" class="com.jd.test.example.Aop_Advice_tongzhi.MyAfterThrowingAdvice"/>
    <!-- 注册代理监控对象生产-->
    <bean id="persionProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="persion"></property>
        <property name="interceptorNames">
            <array>
                <value>methodInterceptor</value>
                <value>before</value>
                <!--<value>afterAdvice</value>-->
                <value>afterReturning</value>
                <value>afterThrowingAdvice</value>
            </array>
        </property>
    </bean>

    <!--   AOP-顾问配置  -->
    <!--监控对象-->
    <bean id="dogService" class="com.jd.test.example.Aop_Advice_guwen.DogService"/>
    <!-- 类型过滤器-->
    <bean id="classFilter" class="com.jd.test.example.Aop_Advice_guwen.MyClassFilter"/>
    <!-- 方法过滤器-->
    <bean id="methodMatcher" class="com.jd.test.example.Aop_Advice_guwen.MyMethodMatcher"/>

    <!-- 切入点-->
    <bean id="pointCut" class="com.jd.test.example.Aop_Advice_guwen.MyPointCut">
        <property name="classFilter" ref="classFilter"/>
        <property name="methodMatcher" ref="methodMatcher"/>
    </bean>
    <!-- 注册通知的实现类-->
    <bean id="beforeAdvice" class="com.jd.test.example.Aop_Advice_guwen.BeforeAdvice"/>
    <!-- 注册顾问-->
    <bean id="myPointCutAdvisor" class="com.jd.test.example.Aop_Advice_guwen.MyPointCutAdvisor">
        <property name="advice" ref="beforeAdvice"/>
        <property name="pointCut" ref="pointCut"/>
    </bean>
    <!-- 注册代理监控对象生产-->
    <bean id="dogProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="dogService"></property>
        <property name="interceptorNames">
            <array>
                <value>myPointCutAdvisor</value>
            </array>
        </property>
    </bean>

</beans>